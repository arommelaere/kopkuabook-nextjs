generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model workspaces {
  uuid              String              @id @db.VarChar(32)
  name              String              @unique(map: "uq_workspaces_name") @db.VarChar(255)
  created_at        DateTime?           @db.DateTime(0)
  updated_at        DateTime?           @db.DateTime(0)
  books             books[]
  destinators       destinators[]
  workspace_members workspace_members[]
}

model book_shipments {
  uuid                 String                 @id @db.VarChar(32)
  book_uuid            String                 @db.VarChar(32)
  destinator_uuid      String                 @db.VarChar(32)
  status               book_shipments_status? @default(planned)
  shipping_method      String?                @db.VarChar(100)
  tracking_number      String?                @db.VarChar(100)
  sent_at              DateTime?              @db.DateTime(0)
  delivered_at         DateTime?              @db.DateTime(0)
  ship_to_name         String                 @db.VarChar(255)
  ship_to_line1        String                 @db.VarChar(255)
  ship_to_line2        String?                @db.VarChar(255)
  ship_to_city         String                 @db.VarChar(120)
  ship_to_state        String?                @db.VarChar(120)
  ship_to_postal_code  String?                @db.VarChar(32)
  ship_to_country_code String                 @db.Char(2)
  notes                String?                @db.Text
  created_at           DateTime?              @db.DateTime(0)
  updated_at           DateTime?              @db.DateTime(0)
  books                books                  @relation(fields: [book_uuid], references: [uuid], onDelete: Cascade, map: "fk_book_shipments_book")
  destinators          destinators            @relation(fields: [destinator_uuid], references: [uuid], map: "fk_book_shipments_destinator")

  @@index([book_uuid], map: "idx_book_shipments_book_uuid")
  @@index([destinator_uuid], map: "idx_book_shipments_destinator_uuid")
  @@index([status], map: "idx_book_shipments_status")
}

model books {
  uuid              String              @id @db.VarChar(32)
  workspace_uuid    String              @db.VarChar(32)
  title             String              @db.VarChar(255)
  description       String?             @db.Text
  created_at        DateTime?           @db.DateTime(0)
  updated_at        DateTime?           @db.DateTime(0)
  book_shipments    book_shipments[]
  workspaces        workspaces          @relation(fields: [workspace_uuid], references: [uuid], onDelete: Cascade, map: "fk_books_workspace")
  books_destinators books_destinators[]
  books_members     books_members[]
  posts             posts[]

  @@index([workspace_uuid], map: "idx_books_workspace_uuid")
}

model books_destinators {
  uuid            String      @id @db.VarChar(32)
  book_uuid       String      @db.VarChar(32)
  destinator_uuid String      @db.VarChar(32)
  created_at      DateTime?   @db.DateTime(0)
  updated_at      DateTime?   @db.DateTime(0)
  books           books       @relation(fields: [book_uuid], references: [uuid], onDelete: Cascade, map: "fk_books_destinators_book")
  destinators     destinators @relation(fields: [destinator_uuid], references: [uuid], onDelete: Cascade, map: "fk_books_destinators_destinator")

  @@unique([book_uuid, destinator_uuid], map: "uq_book_destinator")
  @@index([destinator_uuid], map: "idx_books_destinators_destinator_uuid")
}

model books_members {
  uuid        String              @id @db.VarChar(32)
  book_uuid   String              @db.VarChar(32)
  member_uuid String              @db.VarChar(32)
  role        books_members_role? @default(viewer)
  created_at  DateTime?           @db.DateTime(0)
  updated_at  DateTime?           @db.DateTime(0)
  books       books               @relation(fields: [book_uuid], references: [uuid], onDelete: Cascade, map: "fk_books_members_book")
  members     members             @relation(fields: [member_uuid], references: [uuid], onDelete: Cascade, map: "fk_books_members_member")

  @@unique([book_uuid, member_uuid], map: "uq_book_member")
  @@index([member_uuid], map: "idx_books_members_member_uuid")
}

model destinators {
  uuid              String              @id @db.VarChar(32)
  workspace_uuid    String              @db.VarChar(32)
  name              String              @db.VarChar(255)
  email             String?             @db.VarChar(255)
  phone             String?             @db.VarChar(50)
  photo_url         String?             @db.VarChar(500)
  address_line1     String              @db.VarChar(255)
  address_line2     String?             @db.VarChar(255)
  city              String              @db.VarChar(120)
  state             String?             @db.VarChar(120)
  postal_code       String?             @db.VarChar(32)
  country_code      String              @db.Char(2)
  created_at        DateTime?           @db.DateTime(0)
  updated_at        DateTime?           @db.DateTime(0)
  book_shipments    book_shipments[]
  books_destinators books_destinators[]
  workspaces        workspaces          @relation(fields: [workspace_uuid], references: [uuid], onDelete: Cascade, map: "fk_destinators_workspace")

  @@index([workspace_uuid], map: "idx_destinators_workspace_uuid")
}

model members {
  uuid              String              @id @db.VarChar(32)
  name              String              @db.VarChar(255)
  email             String?             @unique(map: "uq_members_email") @db.VarChar(255)
  photo_url         String?             @db.VarChar(500)
  created_at        DateTime?           @db.DateTime(0)
  updated_at        DateTime?           @db.DateTime(0)
  books_members     books_members[]
  posts             posts[]
  workspace_members workspace_members[]
}

model posts {
  uuid        String    @id @db.VarChar(32)
  book_uuid   String    @db.VarChar(32)
  member_uuid String    @db.VarChar(32)
  content     String    @db.Text
  photo_url   String?   @db.VarChar(500)
  created_at  DateTime? @db.DateTime(0)
  updated_at  DateTime? @db.DateTime(0)
  books       books     @relation(fields: [book_uuid], references: [uuid], onDelete: Cascade, map: "fk_posts_book")
  members     members   @relation(fields: [member_uuid], references: [uuid], map: "fk_posts_member")

  @@index([book_uuid], map: "idx_posts_book_uuid")
  @@index([member_uuid], map: "idx_posts_member_uuid")
}

model workspace_members {
  uuid           String                  @id @db.VarChar(32)
  workspace_uuid String                  @db.VarChar(32)
  member_uuid    String                  @db.VarChar(32)
  role           workspace_members_role? @default(member)
  created_at     DateTime?               @db.DateTime(0)
  updated_at     DateTime?               @db.DateTime(0)
  members        members                 @relation(fields: [member_uuid], references: [uuid], onDelete: Cascade, map: "fk_workspace_members_member")
  workspaces     workspaces              @relation(fields: [workspace_uuid], references: [uuid], onDelete: Cascade, map: "fk_workspace_members_workspace")

  @@unique([workspace_uuid, member_uuid], map: "uq_workspace_member")
  @@index([member_uuid], map: "fk_workspace_members_member")
}

enum book_shipments_status {
  planned
  queued
  sent
  delivered
  canceled
}

enum workspace_members_role {
  owner
  admin
  member
  viewer
}

enum books_members_role {
  owner
  editor
  viewer
}
